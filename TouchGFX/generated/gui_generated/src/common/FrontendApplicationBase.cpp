/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <new>
#include <gui_generated/common/FrontendApplicationBase.hpp>
#include <gui/common/FrontendHeap.hpp>
#include <touchgfx/transitions/NoTransition.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/hal/HAL.hpp>
#ifdef SIMULATOR
#include <platform/driver/lcd/LCD24bpp.hpp>
#endif
#include <gui/screen_init_screen/screen_initView.hpp>
#include <gui/screen_init_screen/screen_initPresenter.hpp>
#include <gui/screen_menu_screen/screen_menuView.hpp>
#include <gui/screen_menu_screen/screen_menuPresenter.hpp>
#include <gui/screen_flow_encrypt_screen/screen_flow_encryptView.hpp>
#include <gui/screen_flow_encrypt_screen/screen_flow_encryptPresenter.hpp>
#include <gui/screen_flow_decrypt_screen/screen_flow_decryptView.hpp>
#include <gui/screen_flow_decrypt_screen/screen_flow_decryptPresenter.hpp>
#include <gui/screen_flow_clone_screen/screen_flow_cloneView.hpp>
#include <gui/screen_flow_clone_screen/screen_flow_clonePresenter.hpp>
#include <gui/screen_flow_wallet_screen/screen_flow_walletView.hpp>
#include <gui/screen_flow_wallet_screen/screen_flow_walletPresenter.hpp>
#include <gui/screen_flow_psbt_screen/screen_flow_psbtView.hpp>
#include <gui/screen_flow_psbt_screen/screen_flow_psbtPresenter.hpp>
#include <gui/screen_flow_settings_screen/screen_flow_settingsView.hpp>
#include <gui/screen_flow_settings_screen/screen_flow_settingsPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
    touchgfx::Texts::setLanguage(SP);
#ifdef SIMULATOR
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
#endif
}

/*
 * Screen Transition Declarations
 */

// screen_init

void FrontendApplicationBase::gotoscreen_initScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoscreen_initScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoscreen_initScreenNoTransitionImpl()
{
    touchgfx::makeTransition<screen_initView, screen_initPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// screen_menu

void FrontendApplicationBase::gotoscreen_menuScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoscreen_menuScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoscreen_menuScreenNoTransitionImpl()
{
    touchgfx::makeTransition<screen_menuView, screen_menuPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// screen_flow_encrypt

void FrontendApplicationBase::gotoscreen_flow_encryptScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoscreen_flow_encryptScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoscreen_flow_encryptScreenNoTransitionImpl()
{
    touchgfx::makeTransition<screen_flow_encryptView, screen_flow_encryptPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// screen_flow_decrypt

void FrontendApplicationBase::gotoscreen_flow_decryptScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoscreen_flow_decryptScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoscreen_flow_decryptScreenNoTransitionImpl()
{
    touchgfx::makeTransition<screen_flow_decryptView, screen_flow_decryptPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// screen_flow_clone

void FrontendApplicationBase::gotoscreen_flow_cloneScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoscreen_flow_cloneScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoscreen_flow_cloneScreenNoTransitionImpl()
{
    touchgfx::makeTransition<screen_flow_cloneView, screen_flow_clonePresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// screen_flow_wallet

void FrontendApplicationBase::gotoscreen_flow_walletScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoscreen_flow_walletScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoscreen_flow_walletScreenNoTransitionImpl()
{
    touchgfx::makeTransition<screen_flow_walletView, screen_flow_walletPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// screen_flow_settings

void FrontendApplicationBase::gotoscreen_flow_settingsScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoscreen_flow_settingsScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoscreen_flow_settingsScreenNoTransitionImpl()
{
    touchgfx::makeTransition<screen_flow_settingsView, screen_flow_settingsPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}
